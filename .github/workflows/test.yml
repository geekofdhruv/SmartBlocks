name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  FOUNDRY_PROFILE: ci
  FOUNDRY_DISABLE_NIGHTLY_WARNING: true

jobs:
  # Job 1: Smart Contract Validation
  contracts-validation:
    name: Smart Contracts Validation
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./contracts
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1
        with:
          version: nightly

      - name: Show Foundry version
        run: |
          forge --version
          cast --version
          anvil --version

      - name: Cache Foundry dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.foundry
            ./contracts/cache
            ./contracts/out
          key: ${{ runner.os }}-foundry-${{ hashFiles('contracts/foundry.toml', 'contracts/lib/**') }}
          restore-keys: |
            ${{ runner.os }}-foundry-

      - name: Install dependencies
        run: forge install

      - name: Check formatting
        run: forge fmt --check

      - name: Build contracts
        run: forge build --sizes


  # Job 2: Frontend Validation
  frontend-validation:
    name: Frontend Validation
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: './frontend/package-lock.json'

      - name: Install dependencies
        run: npm ci

      - name: Type checking
        run: npm run type-check
        continue-on-error: false

      - name: Lint code
        run: npm run lint

      - name: Check code formatting
        run: |
          if command -v prettier &> /dev/null; then
            npm run format:check
          else
            echo "Prettier not configured, skipping format check"
          fi
        continue-on-error: true

      - name: Build application
        run: npm run build

      - name: Check build artifacts
        run: |
          echo "Build completed successfully"
          ls -la dist/
          echo "Build size:"
          du -sh dist/

  # Job 3: Security and Quality Checks
  security-checks:
    name: Security & Quality Checks
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
        continue-on-error: true

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
        continue-on-error: true

      - name: Check for sensitive files
        run: |
          echo "Checking for sensitive files..."
          # Search for common sensitive file patterns while excluding node_modules and .git;
          # use -print -quit and grep -q to ensure the if-condition succeeds only when a match is found.
          if find . -type f \( -name "*.env" -o -name "*.key" -o -name "*.pem" -o -iname "*secret*" \) ! -path "./node_modules/*" ! -path "./.git/*" -print -quit | grep -q .; then
            echo "WARNING: Potential sensitive files found"
            # Print the matching files for debugging
            find . -type f \( -name "*.env" -o -name "*.key" -o -name "*.pem" -o -iname "*secret*" \) ! -path "./node_modules/*" ! -path "./.git/*"
            exit 1
          else
            echo "No sensitive files detected"
          fi

  # Job 4: Dependency Audit
  dependency-audit:
    name: Dependency Audit
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Audit frontend dependencies
        working-directory: ./frontend
        run: |
          if [ -f package-lock.json ]; then
            npm audit --audit-level=high
          else
            echo "No package-lock.json found, skipping audit"
          fi
        continue-on-error: true

      - name: Check for outdated packages
        working-directory: ./frontend
        run: |
          if [ -f package.json ]; then
            npm outdated || true
          fi

  # Job 5: Build Summary
  build-summary:
    name: Build Summary
    runs-on: ubuntu-latest
    needs: [contracts-validation, frontend-validation, security-checks, dependency-audit]
    if: always()
    
    steps:
      - name: Build Summary
        run: |
          echo "## üöÄ CI/CD Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Smart Contracts | ${{ needs.contracts-validation.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Frontend | ${{ needs.frontend-validation.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security Checks | ${{ needs.security-checks.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Dependency Audit | ${{ needs.dependency-audit.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Triggered by:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY

      - name: Notify on failure
        if: failure()
        run: |
          echo "‚ùå CI/CD Pipeline failed. Please check the logs above."
          exit 1